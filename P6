1. ¿Cuál es el puerto por defecto que se utiliza en los siguientes servicios?
	Web / SSH / DNS / Web Seguro / POP3 / IMAP / SMTP
	Investigue en qué lugar en Linux y en Windows está descrita la asociación utilizada por
	defecto para cada servicio.
	
	Web 80 
	SSH 22 
	DNS 53 
	Web Seguro 443 
	POP3 110 
	IMAP 143 
	SMTP 25

	
	En Linux, la asociación de puertos por defecto para los servicios se encuentra
	en el archivo /etc/services. Este archivo es un archivo de texto que contiene
	una lista de servicios registrados, junto con sus números de puerto, protocolos
	y nombres de dominio.
	En Windows, la asociación de puertos por defecto para los servicios se
	encuentra en el archivo %SystemRoot%\System32\drivers\etc\services. Este
	archivo es similar al archivo /etc/services de Linux.

2. Investigue qué es multicast. ¿Sobre cuál de los protocolos de capa de transporte
   funciona? ¿Se podría adaptar para que funcione sobre el otro protocolo de capa de
   transporte? ¿Por qué?
   
    El multicast es una técnica que permite enviar un mensaje a un grupo de
	destinatarios de forma simultánea. A diferencia del broadcast, que envía un
	mensaje a todos los dispositivos de una red, el multicast solo envía el mensaje
	a los dispositivos que están interesados en recibirlo.
	La técnica del multicast funciona sobre UDP, ya que no necesita establecer una
	conexión y se podría usar un mismo socket (un proceso tiene asociado un
	socket) para recibir datos de varios procesos que se quieren comunicar con un
	proceso a la vez.
	Teóricamente podría intentarse adaptar multicast sobre TCP, pero sería
	demasiado complejo e iría en contra de la naturaleza del modelo ya TCP
	establece una conexión punto a punto entre un único emisor y receptor.
	
3. Investigue cómo funciona el protocolo de aplicación FTP teniendo en cuenta las
   diferencias en su funcionamiento cuando se utiliza el modo activo de cuando se utiliza el
   modo pasivo ¿En qué se diferencian estos tipos de comunicaciones del resto de los
   protocolos de aplicación vistos?
   
    FTP requiere dos conexiones TCP. Una conexión de control y otra para la
	transferencia de datos. El cliente escoge cualquier puerto no privilegiado, (n >
	1023) y genera conexión de control contra el puerto 21 del servidor. El servidor
	recibe los comandos por dicha conexión y responde/recibe por la conexión de
	datos aquellos que lo requieran. La conexión de datos se crea y de cierra bajo
	demanda. El estado de cada operación se transmite por el canal de control.
	
	Modo Activo
	- Conexión de control: port 21.
	- Conexión de datos: port 20.
	- El servidor de forma activa se conecta al cliente para generar la conexión de datos.
	
	Modo Pasivo
	- Conexión de control: port 21.
	- Conexión de datos: port no privilegiado.
	- El servidor de forma pasiva indica al cliente a que nuevo puerto debe conectarse. La conexión de datos 		  la abre el cliente.
	
4. Suponiendo Selective Repeat; tamaño de ventana 4 y sabiendo que E indica que el
   mensaje llegó con errores. Indique en el siguiente gráfico, la numeración de los ACK que el
   host B envía al Host A.
   		
   	Emisor										  Receptor
   
	([0123]456789) envio paquete0   	->  	  (0[1234]56789) recibe paquete0, entregado, envia ack0
	([0123]456789) envio paquete1   	->  	  (01[2345]6789) recibe paquete1, entregado, envia ack1	
	([0123]456789) envio paquete2   	->  	   perdido
	([0123]456789) envio paquete3   	->  	  (01[2345]6789) recibe paquete3, guarda en buffer, envia ack3
	(0[1234]56789) envio paquete4,recibe ack0 ->  (01[2345]6789) recibe paquete4, guarda en buffer, envia ack4
	(01[2345]6789) envio paquete5,recibe ack1 ->  (01[2345]6789) recibe paquete5, guarda en buffer, envia ack5
	 -recibe ack3
	 -recibe ack4
	 -recibe ack5
	-Fin temporizador paquete2
	(01[2345]6789)paquete2 reenviado  	->  	  (012345[6789]) recibe paquete2, entrega paquete2, paquete3,
												   paquete4, paquete5, envia ack2
	(01[2345]6789)recibe ack2, no envia nada  ->  //


5. ¿Qué restricción existe sobre el tamaño de ventanas en el protocolo Selective Repeat?

	El tamaño de la ventana no debe exceder la mitad del tamaño total del espacio
	de números de secuencia. La razón detrás de esta restricción es evitar la
	posibilidad de que un número de secuencia se reutilice antes de que el ACK
	correspondiente haya llegado, ya que la ventana se implementa como un buffer
	circular, entonces si fuese más grande podría haber paquetes representados
	por la misma posición en el buffer lo que podría llevar a confusiones en la
	correcta interpretación de los frames.
	
6. De acuerdo a la captura TCP de la siguiente figura, indique los valores de los campos
   borroneados.
   
   primera linea-> flags: SYN, seq:3933822137
   tercera linea-> source: 172.20.1.1, destination: 172.20.1.100, info:41749>vce, flags: ACK,seq: 3933822138, 						   ack:1047471502

	SYN ➔Comienzo de 3WH
	3933822137 ➔Se que es ese porque el receptor (linea 2) me indica que espera
	(ACK) que se le envie el segmento 3833822138, por lo tanto el que le envie en 1
	es 3833822138 – 1
	172.20.1.1 ➔ IP Origen
	172.20.1.100 ➔ IP Destino
	41749 ➔ Puerto Destino
	vce ➔ Puerto Origen
	ACK ➔ Fin de 3WH
	3933822138 ➔ En el segmento anterior a este se indicó que se esperaba
	3933822138
	1047471502 ➔ Se recibió 1047471501 , por lo que se espera recibir 1047471503
	Las confirmaciones son “anticipativas”, indican el nro. de byte que esperan.
	
	
7. Dada la sesión TCP de la figura, completar los valores marcados con un signo de
   interrogación.
   
   SYN 				seq=0  --
   SYN/ACK			seq=0, ack=1
   ACK				seq=1, ack=1
   PSH,ACK-len:7	seq=1, ack=1
   ACK				seq=1, ack=7
   PSH,ACK-len:9	seq=8, ack=1
   ACK				seq=1, ack=9 //porque se le suma 1 al ack aca
   PSH,ACK-len:5	seq=17,ack=1
   ACK				seq=1, ack=17 // y aca no?
   FIN,ACK			seq=22,ack=1
   FIN,ACK			seq=1, ack=22
   seq				seq=23,ack=23
   
  8. ¿Qué es el RTT y cómo se calcula? Investigue la opción TCP timestamp y los campos
	 TSval y TSecr.
	 
	 El RTT es el tiempo que tarda un paquete en viajar desde un host a otro y
	recibir un ACK de vuelta.
	La opción de marcas de tiempo en TCP permite a los endpoints mantener una
	medición más precisa del tiempo de ida y vuelta (RTT) de la red entre ellos.
	Este valor ayuda a cada pila TCP a configurar y ajustar su temporizador de
	retransmisión. Hay otros beneficios, pero la medición RTT es el principal.
	Para ello se incluye un Timestamp Value TSval en cada segmento que se
	envía. Los valores TSval se repiten en el lado opuesto de la conexión en el
	campo Timestamp Echo Reply TSecr . Entonces, cuando se confirma un
	segmento, el remitente de ese segmento puede simplemente restar su marca
	de tiempo actual del valor TSecr para calcular una medición precisa del tiempo
	de ida y vuelta (RTT).
	RTT=TSecr − TSval

9. Para la captura tcp-captura.pcap, responder las siguientes preguntas.
	a. ¿Cuántos intentos de conexiones TCP hay?
		
		6
		
	b. ¿Cuáles son la fuente y el destino (IP:port) para c/u?
	
		Fuente 			Destino
		10.0.2.10:46907 10.0.4.10:5001
		10.0.2.10:45670 10.0.4.10:7002
		10.0.2.10:45671 10.0.4.10:7002
		10.0.2.10:46910 10.0.4.10:5001
		10.0.2.10:54424 10.0.4.10:9000
		10.0.2.10:54425 10.0.4.10:9000
	
	c. ¿Cuántas conexiones TCP exitosas hay en la captura? ¿Cómo diferencia las
	exitosas de las que no lo son? ¿Cuáles flags encuentra en cada una?
	
		4
		Las exitosas tienen los flags SYN/ACK en 1, las fallidas tienen los flags
		RST/ACK en 1
	
	d. Dada la primera conexión exitosa responder:
		
		i.¿Quién inicia la conexión?
		
			La conexión es iniciada por 10.0.2.10:46907
			
		ii.¿Quién es el servidor y quién el cliente?
		
		
			El cliente es el que inicia la conexión 10.0.2.10:46907 y el
			servidor es el destino 10.0.4.10:7002
		
		iii.¿En qué segmentos se ve el 3-way handshake?
		
			el 3, 4 y 5
		
		iv.¿Cuáles ISNs se intercambian?
		
			Se intercambian los ISN 2218428254, 1292618479 y 2218428255.
		
		v.¿Cuál MSS se negoció?
		
			Se puede ver el segmento Nro 4 (siguiendo el orden de Wireshark)
		
		vi.¿Cuál de los dos hosts envía la mayor cantidad de datos (IP:port)?
		
		
			10.0.2.10:46907, se incrementa su numero de secuencia (se
			incrementa cuando se envían datos), mientras que
			10.0.4.10:7002 nunca lo incrementa (salvo en el 3WH).
			10.0.2.10:46907 termina con el ISN relativo de 786458 y
			10.0.4.10:7002 con 1.
	
	e. Identificar primer segmento de datos (origen, destino, tiempo, número de fila y
	   número de secuencia TCP).
		
			Origen: 10.0.2.10:46907
			Destino: 10.0.4.10:7002
			Tiempo: 0.151826
			Nro. de fila: 6
			Nro. de secuencia TCP: 1 (221842855)
		
		i. ¿Cuántos datos lleva?
		
			Lleva 24 bytes.
		
		ii.¿Cuándo es confirmado (tiempo, número de fila y número de secuencia
		    TCP)?
		    
		    Tiempo: 0.151925
			Nro. de fila: 7
			Nro. de secuencia TCP: 1 (1292618480)
		    
		iii.La confirmación, ¿qué cantidad de bytes confirma?
		
			Confirma los 24 bytes, ya que indica que espera el byte nro 25.
	
	f. ¿Quién inicia el cierre de la conexión? ¿Qué flags se utilizan? ¿En cuáles
		segmentos se ve (tiempo, número de fila y número de secuencia TCP)?

		La inicia 10.0.2.10:46907. Utiliza los flags FIN, PSH y ACK
		
10. Responda las siguientes preguntas respecto del mecanismo de control de flujo.
	
	a. ¿Quién lo activa? ¿De qué forma lo hace?
	
		El control de flujo lo activa el receptor enviando ventanas más chicas.
		Esto deja en evidencia que el receptor tiene poco espacio (o no tiene
		más lugar) para seguir recibiendo datos. Esto se realiza a través del
		campo de tamaño de ventana en los encabezados de los segmentos TCP.
	
	b. ¿Qué problema resuelve?
	
		Resuelve el problema de la posible saturación o congestión de los
		buffers en los endpoints. Al indicar al emisor que reduzca la cantidad de
		datos que está enviando, evita que el receptor se sobrecargue.
	
	c. ¿Cuánto tiempo dura activo y qué situación lo desactiva?

11. Responda las siguientes preguntas respecto del mecanismo de control de congestión.
	
	a. ¿Quién activa el mecanismo de control de congestión? ¿Cuáles son los posibles
		disparadores?
	
		El control de congestión lo activa el emisor. El emisor limita la velocidad
		de transmisión de tráfico a través de su conexión en función de la
		congestión de red percibida. Este proceso es dinámico y adaptativo, y el
		emisor ajusta su velocidad de transmisión en respuesta a las
		condiciones cambiantes de la red.
		Los posibles disparadores son:
		
		• Fin de Temporización: La expiración del temporizador asociado con
		el envío de un segmento TCP puede ser interpretada como una
		señal de pérdida, indicando posiblemente congestión en la ruta.
		
		• Recepción de TRES ACK Duplicados: La recepción de paquetes
		ACK duplicados procedentes del receptor también se interpreta
		como un suceso de pérdida. Este evento puede sugerir la pérdida
		de un paquete en la red debido a congestión.
	
	b. ¿Qué problema resuelve?
	
		El objetivo es que no se desborde la propia red. Esto ocurre cuando hay
		más tráfico de red del que la red puede manejar eficientemente, lo que
		puede resultar en la pérdida de paquetes, retrasos elevados y un
		rendimiento de red deficiente. El control de congestión busca evitar que
		la red se sobrecargue ajustando la tasa de transmisión de datos del
		emisor para que sea compatible con la capacidad de la red.
	
	c. Diferencie slow start de congestion-avoidance.
		
		En el protocolo TCP, tanto el slow start como el congestion-avoidance son fases del control de 					congestión, pero tienen objetivos y comportamientos diferentes:
		
		Slow Start
		
    		Objetivo: Detectar rápidamente la capacidad del enlace.
    		Comportamiento: El tamaño de la ventana de congestión (cwnd) se duplica con cada RTT (Round-Trip 								Time) hasta alcanzar un umbral (ssthresh)	
			Ejemplo: Si el cwnd inicial es 1 MSS (Maximum Segment Size), en el primer RTT será 2 MSS, en el 						 segundo 4 MSS, y así sucesivamente
		
		Congestion Avoidance
		
    		Objetivo: Evitar la congestión una vez que se ha encontrado la capacidad del enlace.		
    		Comportamiento: El tamaño de la ventana de congestión se incrementa de manera lineal, generalmente 							añadiendo 1 MSS por cada RTT		
			Ejemplo: Si el cwnd está en 10 MSS, en el siguiente RTT será 11 MSS, luego 12 MSS, y así 								 sucesivamente

		Diferencias Clave
		
    		Tasa de Incremento: En slow start, el incremento es exponencial, mientras que en congestion 										avoidance, es lineal
			Umbral: El slow start continúa hasta alcanzar el umbral (ssthresh), mientras que el congestion 							avoidance comienza después de alcanzar ese umbral
		
		Estas fases trabajan juntas para asegurar que el protocolo TCP pueda adaptarse a las condiciones de la 		red y evitar la congestión, manteniendo un equilibrio entre eficiencia y estabilidad.
			
		Arranque Lento (Slow Start):
		
		• Inicio de la Conexión: Se utiliza al inicio de una conexión TCP.
		
		• Tamaño de la Ventana de Congestión (VentCongestion): Inicializado
		  con un valor pequeño (1 MSS, tamaño máximo de segmento).
		
		• Crecimiento Exponencial: La ventana de congestión se duplica en
		  cada periodo RTT.
		
		• Finalización del Crecimiento Exponencial:
		  o Al detectarse un suceso de pérdida (fin de temporización).
		  o Cuando el valor de VentCongestion alcanza o sobrepasa el umbral de arranque lento (umbralAL).
		
		Evitación de la Congestión (Congestion Avoidance):
		
		• Transición desde Slow Start: Inicia cuando se detecta congestión y
		  se sale del arranque lento.
		
		• Tamaño de Ventana de Congestión (VentCongestion):
		  Aproximadamente la mitad del valor cuando se detectó congestión por última vez.
		
		• Crecimiento Lineal: Se incrementa en un MSS por RTT, más
		  conservador que el crecimiento exponencial.
		
		• Finalización del Crecimiento Lineal:
		  
		  o Al detectarse un suceso de pérdida (fin de temporización o tres ACK duplicados).
		  o El valor de VentCongestion se fija en 1 MSS y se actualiza el umbral de arranque lento (umbralAL).
		  o En el caso de pérdida detectada por tres ACK duplicados, se realiza un ajuste menos drástico del 				valor de VentCongestion y umbralAL, entrando en el estado de recuperación rápida.

12. Para la captura udp-captura.pcap, responder las siguientes preguntas.
	
	a. ¿Cuántas comunicaciones (srcIP,srcPort,dstIP,dstPort) UDP hay en la captura?
	
		En principio son 9, pero hay algunas que se tratan de la misma conversación, así que son 6
		
		Fuente 			Destino
		10.0.2.10:0     10.0.30.10:8003
		10.0.2.10:9004  10.0.3.10:9045
		10.0.2.10:9004  1.1.1.1:9045
		10.0.2.10:53300 10.0.4.10:9045
		10.0.2.10:59053 10.0.4.10:8003
		10.0.2.10:8003  10.0.4.10:8003
	
	b. ¿Cómo se podrían identificar las exitosas de las que no lo son?
	
	Se puede determinar con los mensajes ICMP

	c. ¿UDP puede utilizar el modelo cliente/servidor?
	
		Como no se establece una conexión, no sigue ningún modelo en
		particular, no tiene una estructura interna para definir roles específicos
		de cliente o servidor. Aun así, la mayoría de las aplicaciones que utilizan
		UDP suelen adoptar un modelo cliente/servidor según las necesidades
		del servicio que están proporcionando.
	
	d. ¿Qué servicios o aplicaciones suelen utilizar este protocolo?¿Qué requerimientos
		tienen?
	
		DHCP, DNS, SNMP, TFTP, VoIP, IPTV 
			
	e. ¿Qué hace el protocolo UDP en relación al control de errores?
	
		Lo único que ofrece es el checksum. Si detecta un error usando el
		checksum UDP no entrega el datagrama a la aplicación
	
	f. Con respecto a los puertos vistos en las capturas, ¿observa algo particular que lo
		diferencie de TCP?
		
		En UDP el puerto origen puede ser 0 si no necesita una respuesta,
		puede ser simplemente un envio.
		
	g. Dada la primera comunicación en la cual se ven datos en ambos sentidos
	   (identificar el primer datagrama):
		
		i. ¿Cuál es la dirección IP que envía el primer datagrama?,¿desde cuál
			puerto?
		
			10.0.2.10:9004
		
		ii. ¿Cuántos datos se envían en un sentido y en el otro?
		
			12 bytes de 10.0.3.10:9045 a 10.0.2.10:9004
			9 bytes de 10.0.2.10:9004 a 10.0.3.10:9045


13. Dada la salida que se muestra en la imagen, responda los ítems debajo.

	● Suponga que ejecuta los siguientes comandos desde un host con la IP 10.100.25.90. Responda qué devuelve		  la ejecución de los siguientes comandos y, en caso que corresponda, especifique los flags.
	
	a. hping3 -p 3306 –udp 10.100.25.135
		ICMP Port Unreachable ya que el puerto no esta escuchando para UDP
	b. hping3 -S -p 25 10.100.25.135
		Va a devolver flag RST/ACK ya que no hay ningún proceso en estado
		LISTEN en ese puerto
	c. hping3 -S -p 22 10.100.25.135
		Va a devolver flag SYN/ACK ya que hay un proceso en estado LISTEN
		para cualquiera en ese puerto.
	d. hping3 -S -p 110 10.100.25.135
		Va a devolver flag RST/ACK ya que no hay ningún proceso en estado
		LISTEN en ese puerto
	
	● ¿Cuántas conexiones distintas hay establecidas? Justifique.
	
		3
		
		1. 127.0.0.1:3306 con 127.0.0.1:34338
		2. 127.0.0.1:48717 con 127.0.0.1:3306
		3. 10.100.25.135:22 con 200.100.120.210:61576
		
		Si bien se ven 5, esas 2 que faltan son
		127.0.0.1:34338 con 127.0.0.1:3306
		127.0.0.1:3306 con 127.0.0.1:48717
		que son 1 y 2 pero con Local Address y Peer Address al revés ya
		que el comando presenta ambas para mostrar el flujo bidireccional
		de la comunicación.
